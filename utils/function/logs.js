const { EmbedBuilder } = require('discord.js');
const LogsModel = require('../database/schema/Logs.js');

async function sendLog(guild, type, data) {
    const logsData = await LogsModel.findOne({ guildId: guild.id });
    if (!logsData || !logsData.channels[type]) return;

    const channel = guild.channels.cache.get(logsData.channels[type]);
    if (!channel) return;

    const logEmbed = createLogEmbed(type, data);
    if (logEmbed) {
        await channel.send({ embeds: [logEmbed] });
    }
}

function createLogEmbed(type, data) {
    const embed = new EmbedBuilder()
        .setTimestamp()
        .setFooter({ text: `ID: ${data.id || 'N/A'}` });

    switch (type) {
        // MEMBERS
        case 'MEMBERS': {
            switch (data.action) {
                case 'JOIN':
                    return embed
                        .setTitle('üëã Nouveau Membre')
                        .setDescription(`${data.user.tag} a rejoint le serveur`)
                        .setColor('#00FF00')
                        .setThumbnail(data.user.displayAvatarURL())
                        .addFields(
                            { name: 'Compte cr√©√© le', value: `<t:${Math.floor(data.user.createdAt.getTime() / 1000)}:F>` },
                            { name: 'ID du membre', value: data.user.id }
                        );

                case 'LEAVE':
                    return embed
                        .setTitle('üëã D√©part d\'un Membre')
                        .setDescription(`${data.user.tag} a quitt√© le serveur`)
                        .setColor('#FF0000')
                        .setThumbnail(data.user.displayAvatarURL());

                case 'NICKNAME':
                    return embed
                        .setTitle('üìù Modification de Surnom')
                        .setDescription(`Le surnom de ${data.user.tag} a √©t√© modifi√©`)
                        .setColor('#FFA500')
                        .addFields(
                            { name: 'Ancien surnom', value: data.oldNickname || 'Aucun' },
                            { name: 'Nouveau surnom', value: data.newNickname || 'Aucun' }
                        );

                case 'ROLE_ADD':
                    return embed
                        .setTitle('üì• Attribution de R√¥le')
                        .setDescription(`Un r√¥le a √©t√© ajout√© √† ${data.user.tag}`)
                        .setColor('#00FF00')
                        .addFields(
                            { name: 'R√¥le ajout√©', value: data.role.toString() },
                            { name: 'Par', value: data.executor.tag }
                        );

                case 'ROLE_REMOVE':
                    return embed
                        .setTitle('üì§ Retrait de R√¥le')
                        .setDescription(`Un r√¥le a √©t√© retir√© √† ${data.user.tag}`)
                        .setColor('#FF0000')
                        .addFields(
                            { name: 'R√¥le retir√©', value: data.role.toString() },
                            { name: 'Par', value: data.executor.tag }
                        );

                case 'TIMEOUT':
                    return embed
                        .setTitle('‚è∞ Membre mis en timeout')
                        .setColor('#FF4500')
                        .setDescription(`${data.user.tag} a √©t√© mis en timeout`)
                        .addFields(
                            { name: 'Par', value: data.executor.tag },
                            { name: 'Dur√©e', value: data.duration },
                            { name: 'Raison', value: data.reason || 'Aucune raison fournie' }
                        );

                case 'BAN':
                    return embed
                        .setTitle('üî® Membre Banni')
                        .setColor('#FF0000')
                        .setDescription(`${data.user.tag} a √©t√© banni`)
                        .addFields(
                            { name: 'Par', value: data.executor.tag },
                            { name: 'Raison', value: data.reason || 'Aucune raison fournie' }
                        );

                case 'UNBAN':
                    return embed
                        .setTitle('üîì Membre D√©banni')
                        .setColor('#00FF00')
                        .setDescription(`${data.user.tag} a √©t√© d√©banni`)
                        .addFields(
                            { name: 'Par', value: data.executor.tag }
                        );

                case 'KICK':
                    return embed
                        .setTitle('üë¢ Membre Expuls√©')
                        .setColor('#FFA500')
                        .setDescription(`${data.user.tag} a √©t√© expuls√©`)
                        .addFields(
                            { name: 'Par', value: data.executor.tag },
                            { name: 'Raison', value: data.reason || 'Aucune raison fournie' }
                        );
            }
            break;
        }

        // MESSAGES
        case 'MESSAGES': {
            switch (data.action) {
                case 'DELETE':
                    return embed
                        .setTitle('üóëÔ∏è Message Supprim√©')
                        .setColor('#FF0000')
                        .setDescription(`Un message de ${data.user.tag} a √©t√© supprim√© dans ${data.channel.toString()}`)
                        .addFields(
                            { name: 'Contenu', value: data.content || 'Impossible de r√©cup√©rer le contenu' },
                            { name: 'Par', value: data.executor?.tag || 'Inconnu' }
                        );

                case 'EDIT':
                    return embed
                        .setTitle('‚úèÔ∏è Message Modifi√©')
                        .setColor('#FFA500')
                        .setDescription(`Un message de ${data.user.tag} a √©t√© modifi√© dans ${data.channel.toString()}`)
                        .addFields(
                            { name: 'Avant', value: data.oldContent || 'Impossible de r√©cup√©rer le contenu' },
                            { name: 'Apr√®s', value: data.newContent }
                        );

                case 'BULK_DELETE':
                    return embed
                        .setTitle('üóëÔ∏è Messages Supprim√©s en Masse')
                        .setColor('#FF0000')
                        .setDescription(`${data.count} messages ont √©t√© supprim√©s dans ${data.channel.toString()}`)
                        .addFields(
                            { name: 'Par', value: data.executor.tag }
                        );
            }
            break;
        }

        // CHANNELS
        case 'CHANNELS': {
            switch (data.action) {
                case 'CREATE':
                    return embed
                        .setTitle('üìù Salon Cr√©√©')
                        .setColor('#00FF00')
                        .setDescription(`Le salon ${data.channel.toString()} a √©t√© cr√©√©`)
                        .addFields([
                            { name: 'Par', value: data.executor?.tag || 'Inconnu' },
                            { name: 'Type', value: data.channel.type.toString() || 'Inconnu' }
                        ]);
        
                case 'DELETE':
                    return embed
                        .setTitle('üóëÔ∏è Salon Supprim√©')
                        .setColor('#FF0000')
                        .setDescription(`Le salon ${data.name || 'Inconnu'} a √©t√© supprim√©`)
                        .addFields([
                            { name: 'Par', value: data.executor?.tag || 'Inconnu' }
                        ]);
        
                case 'UPDATE':
                    return embed
                        .setTitle('üîÑ Salon Modifi√©')
                        .setColor('#FFA500')
                        .setDescription(`Le salon ${data.channel.toString()} a √©t√© modifi√©`)
                        .addFields([
                            { name: 'Par', value: data.executor?.tag || 'Inconnu' },
                            { name: 'Modifications', value: Array.isArray(data.changes) ? data.changes.join('\n') : 'Modifications inconnues' }
                        ]);
            }
            break;
        }

        // ROLES
        case 'ROLES': {
            switch (data.action) {
                case 'CREATE':
                    return embed
                        .setTitle('‚ú® R√¥le Cr√©√©')
                        .setColor('#00FF00')
                        .setDescription(`Le r√¥le ${data.role.toString()} a √©t√© cr√©√©`)
                        .addFields(
                            { name: 'Par', value: data.executor.tag }
                        );

                case 'DELETE':
                    return embed
                        .setTitle('üóëÔ∏è R√¥le Supprim√©')
                        .setColor('#FF0000')
                        .setDescription(`Le r√¥le ${data.name} a √©t√© supprim√©`)
                        .addFields(
                            { name: 'Par', value: data.executor.tag }
                        );

                case 'UPDATE':
                    return embed
                        .setTitle('üîÑ R√¥le Modifi√©')
                        .setColor('#FFA500')
                        .setDescription(`Le r√¥le ${data.role.toString()} a √©t√© modifi√©`)
                        .addFields(
                            { name: 'Par', value: data.executor.tag },
                            { name: 'Modifications', value: data.changes.join('\n') }
                        );
            }
            break;
        }

        // SERVER
        case 'SERVER': {
            switch (data.action) {
                case 'UPDATE':
                    return embed
                        .setTitle('üîÑ Serveur Modifi√©')
                        .setColor('#FFA500')
                        .setDescription('Les param√®tres du serveur ont √©t√© modifi√©s')
                        .addFields(
                            { name: 'Par', value: data.executor.tag },
                            { name: 'Modifications', value: data.changes.join('\n') }
                        );

                case 'INVITE_CREATE':
                    return embed
                        .setTitle('üì® Invitation Cr√©√©e')
                        .setColor('#00FF00')
                        .setDescription(`Une nouvelle invitation a √©t√© cr√©√©e`)
                        .addFields(
                            { name: 'Par', value: data.executor.tag },
                            { name: 'Code', value: data.code },
                            { name: 'Expire', value: data.expires || 'Jamais' },
                            { name: 'Utilisations max', value: data.maxUses.toString() }
                        );

                case 'EMOJI_CREATE':
                    return embed
                        .setTitle('üòÄ Emoji Ajout√©')
                        .setColor('#00FF00')
                        .setDescription(`Un nouvel emoji a √©t√© ajout√©`)
                        .addFields(
                            { name: 'Par', value: data.executor.tag },
                            { name: 'Nom', value: data.name }
                        );
            }
            break;
        }

        // COMMANDS
        case 'COMMANDS': {
            switch (data.action) {
                case 'USE':
                    return embed
                        .setTitle('ü§ñ Commande Utilis√©e')
                        .setColor('#0099FF')
                        .setDescription(`${data.user.tag} a utilis√© une commande`)
                        .addFields(
                            { name: 'Commande', value: data.command },
                            { name: 'Salon', value: data.channel.toString() }
                        );

                case 'ERROR':
                    return embed
                        .setTitle('‚ùå Erreur de Commande')
                        .setColor('#FF0000')
                        .setDescription(`Une erreur est survenue lors de l'ex√©cution d'une commande`)
                        .addFields(
                            { name: 'Utilisateur', value: data.user.tag },
                            { name: 'Commande', value: data.command },
                            { name: 'Erreur', value: `\`\`\`${data.error}\`\`\`` }
                        );
            }
            break;
        }
    }
}

module.exports = { sendLog };